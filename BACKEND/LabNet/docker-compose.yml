services:
  db:
    image: postgres:17
    container_name: espectaculos_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-espectaculosdb}
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-espectaculosdb}"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.web
    container_name: espectaculos_web
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: ${ASPNETCORE_URLS:-http://+:8080}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5262}
      ConnectionStrings__Default: ${ConnectionStrings__Default:-Host=db;Port=5432;Database=espectaculosdb;Username=postgres;Password=postgres}
      AUTO_MIGRATE: ${AUTO_MIGRATE:-true}
      AUTO_SEED: ${AUTO_SEED:-true}
      SEED_RESET: ${SEED_RESET:-true}
      VALIDATION_TOKENS__SECRET: ${VALIDATION_TOKENS__SECRET:-local-dev-super-secret}
      VALIDATION_TOKENS__DEFAULT_EXPIRY_MINUTES: ${VALIDATION_TOKENS__DEFAULT_EXPIRY_MINUTES:-120}
      # OpenTelemetry: exportar a Collector corriendo en host (observability compose)
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://host.docker.internal:4317}
      # Serilog -> Seq del host
      Serilog__WriteTo__1__Args__serverUrl: ${SEQ_URL:-http://host.docker.internal:5341}
      Serilog__WriteTo__1__Args__apiKey: ${SEQ_API_KEY:-}
    ports:
      - "${WEB_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
    name: espectaculos_pgdata